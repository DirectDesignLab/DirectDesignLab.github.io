{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Link}from'react-router-dom';import'./TypeThonHome.css';import{jsx as _jsx}from\"react/jsx-runtime\";function TypeThonHome(){const[typeThonList,setTypeThonList]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{import('../../data/typeThon/typeThonList.json').then(module=>{const data=module.default;// default 키를 통해 데이터에 접근\nconsole.log('Loaded data:',data);// 데이터 로드 확인\nif(Array.isArray(data)){setTypeThonList(data);}else{setError('Fetched data is not an array');}}).catch(error=>{setError('Error loading JSON data');console.error(error);}).finally(()=>{setLoading(false);});},[]);if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}if(error){return/*#__PURE__*/_jsx(\"div\",{children:error});}return/*#__PURE__*/_jsx(\"div\",{className:\"type-thon-home\",children:typeThonList.map((topic,index)=>/*#__PURE__*/_jsx(Link,{to:\"/type-thon/\".concat(topic.id),children:topic.title},index))});}export default TypeThonHome;","map":{"version":3,"names":["React","useEffect","useState","Link","jsx","_jsx","TypeThonHome","typeThonList","setTypeThonList","loading","setLoading","error","setError","then","module","data","default","console","log","Array","isArray","catch","finally","children","className","map","topic","index","to","concat","id","title"],"sources":["/Users/jero/Documents/GitHub/directdesignlab.github.io/src/pages/TypeThon/TypeThonHome.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './TypeThonHome.css';\n\nfunction TypeThonHome() {\n  const [typeThonList, setTypeThonList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    import('../../data/typeThon/typeThonList.json')\n      .then((module) => {\n        const data = module.default; // default 키를 통해 데이터에 접근\n        console.log('Loaded data:', data); // 데이터 로드 확인\n        if (Array.isArray(data)) {\n          setTypeThonList(data);\n        } else {\n          setError('Fetched data is not an array');\n        }\n      })\n      .catch((error) => {\n        setError('Error loading JSON data');\n        console.error(error);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return (\n    <div className=\"type-thon-home\">\n      {typeThonList.map((topic, index) => (\n        <Link key={index} to={`/type-thon/${topic.id}`}>\n          {topic.title}\n        </Link>\n      ))}\n    </div>\n  );\n}\n\nexport default TypeThonHome;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,IAAI,KAAQ,kBAAkB,CACvC,MAAO,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5B,QAAS,CAAAC,YAAYA,CAAA,CAAG,CACtB,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGN,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACO,OAAO,CAAEC,UAAU,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACS,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAExCD,SAAS,CAAC,IAAM,CACd,MAAM,CAAC,uCAAuC,CAAC,CAC5CY,IAAI,CAAEC,MAAM,EAAK,CAChB,KAAM,CAAAC,IAAI,CAAGD,MAAM,CAACE,OAAO,CAAE;AAC7BC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEH,IAAI,CAAC,CAAE;AACnC,GAAII,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,CAAE,CACvBP,eAAe,CAACO,IAAI,CAAC,CACvB,CAAC,IAAM,CACLH,QAAQ,CAAC,8BAA8B,CAAC,CAC1C,CACF,CAAC,CAAC,CACDS,KAAK,CAAEV,KAAK,EAAK,CAChBC,QAAQ,CAAC,yBAAyB,CAAC,CACnCK,OAAO,CAACN,KAAK,CAACA,KAAK,CAAC,CACtB,CAAC,CAAC,CACDW,OAAO,CAAC,IAAM,CACbZ,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAC,CACN,CAAC,CAAE,EAAE,CAAC,CAEN,GAAID,OAAO,CAAE,CACX,mBAAOJ,IAAA,QAAAkB,QAAA,CAAK,YAAU,CAAK,CAAC,CAC9B,CAEA,GAAIZ,KAAK,CAAE,CACT,mBAAON,IAAA,QAAAkB,QAAA,CAAMZ,KAAK,CAAM,CAAC,CAC3B,CAEA,mBACEN,IAAA,QAAKmB,SAAS,CAAC,gBAAgB,CAAAD,QAAA,CAC5BhB,YAAY,CAACkB,GAAG,CAAC,CAACC,KAAK,CAAEC,KAAK,gBAC7BtB,IAAA,CAACF,IAAI,EAAayB,EAAE,eAAAC,MAAA,CAAgBH,KAAK,CAACI,EAAE,CAAG,CAAAP,QAAA,CAC5CG,KAAK,CAACK,KAAK,EADHJ,KAEL,CACP,CAAC,CACC,CAAC,CAEV,CAEA,cAAe,CAAArB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}